digraph EgressPipeImpl {
subgraph cluster {
graph [
label="", labeljust=r, style=bold];
0[label=__START__, margin="", shape=rectangle, style=solid];
1[label=__EXIT__, margin="", shape=rectangle, style=solid];
2[label="is_recirculation_needed_0/is_recirculation_needed = 0;", margin="", shape=rectangle, style=solid];
3[label="standard_metadata.instance_type == 0;", margin="", shape=rectangle, style=solid];
4[label="egress_queue_depth_monitor_control_block_port_id/port_id = (bit<32>)standard_metadata.egress_spec;
...
local_metadata.egress_queue_event_hdr.egress_queue_event_port = standard_metadata.egress_port;", margin="", shape=rectangle, style=solid];
5[label="standard_metadata.deq_qdepth >= egress_queue_depth_monitor_control_block_last_updated_deq_depth/last_updated_deq_depth + 2;", margin="", shape=rectangle, style=solid];
6[label="local_metadata.egress_queue_event_hdr.event_src_type = 1;
...
local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth = 1;", margin="", shape=rectangle, style=solid];
7[label="standard_metadata.deq_qdepth < egress_queue_depth_monitor_control_block_last_updated_deq_depth/last_updated_deq_depth + 524286;", margin="", shape=rectangle, style=solid];
8[label="local_metadata.egress_queue_event_hdr.event_src_type = 1;
...
local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth = 1;", margin="", shape=rectangle, style=solid];
9[label="local_metadata.egress_queue_event_hdr.egress_queue_event = 10;
local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth = 0;", margin="", shape=rectangle, style=solid];
10[label="EgressPipeImpl.egress_rate_monitor_control_block.egress_rate_monitor_table", margin="", shape=ellipse, style=solid];
11[label="local_metadata.egress_rate_event_hdr.egress_traffic_color != local_metadata.temp;", margin="", shape=rectangle, style=solid];
12[label="local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate = 1;
...
local_metadata.egress_rate_event_hdr.egress_rate_event_data = 21;", margin="", shape=rectangle, style=solid];
13[label="local_metadata.is_multicast;", margin="", shape=rectangle, style=solid];
14[label="is_recirculation_needed_0/is_recirculation_needed && (local_metadata.flag_hdr.is_control_pkt_from_delay_proc || local_metadata.rate_control_event == 2 || local_metadata.rate_control_event == 3) && (local_metadata.flag_hdr.is_control_pkt_from_ing_queue_rate || local_metadata.flag_hdr.is_control_pkt_from_ing_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate || local_metadata.flag_hdr.is_control_pkt_from_delay_proc);", margin="", shape=rectangle, style=solid];
15[label="clone3<list<standard_metadata_t, local_metadata_t>>(CloneType.E2E, (bit<32>)standard_metadata.ingress_port + 512, {standard_metadata, local_metadata});", margin="", shape=rectangle, style=solid];
16[label="(local_metadata.flag_hdr.is_control_pkt_from_delay_proc || local_metadata.rate_control_event == 2 || local_metadata.rate_control_event == 3) && (local_metadata.flag_hdr.is_control_pkt_from_ing_queue_rate || local_metadata.flag_hdr.is_control_pkt_from_ing_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate || local_metadata.flag_hdr.is_control_pkt_from_delay_proc);", margin="", shape=rectangle, style=solid];
17[label="clone3<list<standard_metadata_t, local_metadata_t>>(CloneType.E2E, (bit<32>)standard_metadata.ingress_port + 256, {standard_metadata, local_metadata});", margin="", shape=rectangle, style=solid];
18[label="local_metadata.flag_hdr.is_control_pkt_from_ing_queue_rate || local_metadata.flag_hdr.is_control_pkt_from_ing_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_depth || local_metadata.flag_hdr.is_control_pkt_from_egr_queue_rate || local_metadata.flag_hdr.is_control_pkt_from_delay_proc;", margin="", shape=rectangle, style=solid];
19[label="clone3<list<standard_metadata_t, local_metadata_t>>(CloneType.E2E, 255, {standard_metadata, local_metadata});", margin="", shape=rectangle, style=solid];
20[label="local_metadata.flag_hdr.is_control_pkt_from_delay_proc || local_metadata.rate_control_event == 2 || local_metadata.rate_control_event == 3;", margin="", shape=rectangle, style=solid];
21[label="clone3<list<standard_metadata_t, local_metadata_t>>(CloneType.E2E, (bit<32>)standard_metadata.ingress_port, {standard_metadata, local_metadata});", margin="", shape=rectangle, style=solid];
22[label="standard_metadata.instance_type == 0;", margin="", shape=rectangle, style=solid];
23[label="egressPortCounter.count((bit<32>)standard_metadata.egress_port);", margin="", shape=rectangle, style=solid];
24[label="local_metadata.flag_hdr.is_pkt_toward_host;", margin="", shape=rectangle, style=solid];
25[label="log_msg(\"Packet toward host so no need to do anything\");", margin="", shape=rectangle, style=solid];
26[label="standard_metadata.egress_port == 0;", margin="", shape=rectangle, style=solid];
27[label="log_msg(\"A normal packet has been  decided to be sent on port 0. Which should not be. Debug it\");
...
mark_to_drop(standard_metadata);", margin="", shape=rectangle, style=solid];
28[label="standard_metadata.egress_port == 255;", margin="", shape=rectangle, style=solid];
29[label="log_msg(\"A normal packet has been  decided to be sent on CPU_PORT. Which should not be. Debug it\");", margin="", shape=rectangle, style=solid];
30[label="standard_metadata.egress_port == 0;", margin="", shape=rectangle, style=solid];
31[label="set_all_header_invalid();
...
recirculate<parsed_headers_t>(hdr);", margin="", shape=rectangle, style=solid];
32[label="standard_metadata.egress_port == 255;", margin="", shape=rectangle, style=solid];
33[label="set_all_header_invalid_2/set_all_header_invalid();
...
ctrlPktToCPCounter.count((bit<32>)standard_metadata.egress_port);", margin="", shape=rectangle, style=solid];
34[label="p2pFeedbackCounter.count((bit<32>)standard_metadata.egress_port);", margin="", shape=rectangle, style=solid];
35[label="local_metadata.flag_hdr.is_packet_from_downstream_port;", margin="", shape=rectangle, style=solid];
36[label="mark_to_drop(standard_metadata);", margin="", shape=rectangle, style=solid];
0 -> 2[label=""];
2 -> 3[label=""];
3 -> 4[label=TRUE];
3 -> 22[label=FALSE];
4 -> 5[label=""];
5 -> 6[label=TRUE];
5 -> 7[label=FALSE];
6 -> 10[label=""];
7 -> 8[label=TRUE];
7 -> 9[label=FALSE];
8 -> 10[label=""];
9 -> 10[label=""];
10 -> 11[label=""];
11 -> 12[label=TRUE];
11 -> 13[label=FALSE];
12 -> 13[label=""];
13 -> 1[label=TRUE];
13 -> 14[label=FALSE];
14 -> 15[label=TRUE];
14 -> 16[label=FALSE];
15 -> 22[label=""];
16 -> 17[label=TRUE];
16 -> 18[label=FALSE];
17 -> 22[label=""];
18 -> 19[label=TRUE];
18 -> 20[label=FALSE];
19 -> 22[label=""];
20 -> 21[label=TRUE];
20 -> 22[label=FALSE];
21 -> 22[label=""];
22 -> 23[label=TRUE];
22 -> 30[label=FALSE];
23 -> 24[label=""];
24 -> 25[label=TRUE];
24 -> 26[label=FALSE];
25 -> 1[label=""];
26 -> 27[label=TRUE];
26 -> 28[label=FALSE];
27 -> 1[label=""];
28 -> 29[label=TRUE];
28 -> 1[label=FALSE];
29 -> 1[label=""];
30 -> 31[label=TRUE];
30 -> 32[label=FALSE];
31 -> 1[label=""];
32 -> 33[label=TRUE];
32 -> 34[label=FALSE];
33 -> 1[label=""];
34 -> 35[label=""];
35 -> 36[label=TRUE];
35 -> 1[label=FALSE];
36 -> 1[label=""];
}
}
